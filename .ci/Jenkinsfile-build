pipeline {
	agent none
	stages {

stage('Build') {
	steps {
		script {
			def builds = [:]
			def docker_base = "px4io/px4-dev-base:2018-03-30"
			def docker_nuttx = "px4io/px4-dev-nuttx:2018-03-30"
			def docker_ros = "px4io/px4-dev-ros:2018-03-30"
			def docker_rpi = "px4io/px4-dev-raspi:2018-03-30"
			def docker_armhf = "px4io/px4-dev-armhf:2017-12-30"
			def docker_arch = "px4io/px4-dev-base-archlinux:2018-03-30"
			def docker_snapdragon = "lorenzmeier/px4-dev-snapdragon:2017-12-29"
			def docker_clang = "px4io/px4-dev-clang:2018-03-30"

			// fmu-v2_{default, lpe} and fmu-v3_{default, rtps}
			// bloaty compare to last successful master build
			builds["px4fmu-v2"] = {
				node {
					stage("Build Test px4fmu-v2") {
						docker.image(docker_nuttx).inside('-e CCACHE_BASEDIR=$WORKSPACE -v ${CCACHE_DIR}:${CCACHE_DIR}:rw') {
							stage("px4fmu-v2") {
								checkout scm
								sh "export"
								sh "make distclean"
								sh "ccache -z"
								sh "git fetch --tags"
								sh "make nuttx_px4io-v2_default"
								sh "make nuttx_px4io-v2_default bloaty_symbols"
								sh "make nuttx_px4io-v2_default bloaty_compileunits"
								sh "make nuttx_px4io-v2_default bloaty_compare_master"
								sh "make nuttx_px4fmu-v2_default"
								sh "make nuttx_px4fmu-v2_default bloaty_symbols"
								sh "make nuttx_px4fmu-v2_default bloaty_compileunits"
								sh "make nuttx_px4fmu-v2_default bloaty_inlines"
								sh "make nuttx_px4fmu-v2_default bloaty_templates"
								sh "make nuttx_px4fmu-v2_default bloaty_compare_master"
								sh "make nuttx_px4fmu-v2_lpe"
								sh "make nuttx_px4fmu-v2_test"
								sh "make nuttx_px4fmu-v3_default"
								sh "make nuttx_px4fmu-v3_rtps"
								sh "make sizes"
								sh "ccache -s"
								archiveArtifacts(allowEmptyArchive: false, artifacts: 'build/**/*.px4, build/**/*.elf', fingerprint: true, onlyIfSuccessful: true)
								sh "make distclean"
							}
						}
					}
				}
			}

			// nuttx default targets that are archived and uploaded to s3
			for (def option in ["px4fmu-v4", "px4fmu-v4pro", "px4fmu-v5", "aerofc-v1", "aerocore2", "auav-x21", "crazyflie", "mindpx-v2", "nxphlite-v3", "tap-v1", "omnibus-f4sd"]) {
				def node_name = "${option}"
				builds[node_name] = createBuildNode(docker_nuttx, "${node_name}_default", true)
			}

			// other nuttx default targets
			for (def option in ["px4-same70xplained-v1", "px4-stm32f4discovery", "px4cannode-v1", "px4esc-v1", "px4nucleoF767ZI-v1", "s2740vc-v1"]) {
				def node_name = "${option}"
				builds[node_name] = createBuildNode(docker_nuttx, "${node_name}_default", false)
			}

			builds["sitl_rtps"] = createBuildNode(docker_base, 'posix_sitl_rtps', false)
			builds["sitl (GCC 7)"] = createBuildNode(docker_arch, 'posix_sitl_default', false)

			builds["rpi"] = createBuildNode(docker_rpi, 'posix_rpi_cross', false)
			builds["bebop"] = createBuildNode(docker_rpi, 'posix_bebop_default', false)

			builds["ocpoc"] = createBuildNode(docker_armhf, 'posix_ocpoc_ubuntu', false)

			// snapdragon (eagle_default)
			builds["eagle (linux)"] = createBuildNodeDockerLogin(docker_snapdragon, 'docker_hub_dagar', 'posix_eagle_default')
			builds["eagle (qurt)"] = createBuildNodeDockerLogin(docker_snapdragon, 'docker_hub_dagar', 'qurt_eagle_default')

			// MAC OS posix_sitl_default
			builds["sitl (OSX)"] = {
				node("mac") {
					withEnv(["CCACHE_BASEDIR=${pwd()}"]) {
						stage("sitl (OSX)") {
							checkout scm
							sh "export"
							sh "make distclean"
							sh "ccache -z"
							sh "make posix_sitl_default"
							sh "ccache -s"
							sh "make distclean"
						}
					}
				}
			}

			// MAC OS nuttx_px4fmu-v4pro_default
			builds["px4fmu-v4pro (OSX)"] = {
				node("mac") {
					withEnv(["CCACHE_BASEDIR=${pwd()}"]) {
						stage("px4fmu-v4pro (OSX)") {
							checkout scm
							sh "export"
							sh "make distclean"
							sh "ccache -z"
							sh "make nuttx_px4fmu-v4pro_default"
							sh "ccache -s"
							sh "make distclean"
						}
					}
				}
			}

		parallel builds

		} // script
	} // steps
} // stage Build

	} // stages
	environment {
		CCACHE_DIR = '/tmp/ccache'
		CI = true
	}
	options {
		buildDiscarder(logRotator(numToKeepStr: '10', artifactDaysToKeepStr: '30'))
		timeout(time: 60, unit: 'MINUTES')
	}
}

def createBuildNode(String docker_repo, String target, Boolean archive) {
	return {
		node {
			docker.image(docker_repo).inside('-e CCACHE_BASEDIR=${WORKSPACE} -v ${CCACHE_DIR}:${CCACHE_DIR}:rw') {
				stage(target) {
					try {
						sh('export')
						checkout(scm)
						sh('make distclean')
						sh('git fetch --tags')
						sh('ccache -z')
						sh('make ' + target)
						sh('ccache -s')
						sh('make sizes')
						if (archive) {
							archiveArtifacts(allowEmptyArchive: false, artifacts: 'build/**/*.px4, build/**/*.elf, build/**/*.bin', fingerprint: true, onlyIfSuccessful: true)
						}
					}
					catch (exc) {
						throw{exc}
					}
					finally {
						sh('make distclean')
					}
				}
			}
		}
	}
}

def createBuildNodeDockerLogin(String docker_repo, String docker_credentials, String target) {
	return {
		node {
			docker.withRegistry('https://registry.hub.docker.com', docker_credentials) {
				docker.image(docker_repo).inside('-e CCACHE_BASEDIR=$WORKSPACE -v ${CCACHE_DIR}:${CCACHE_DIR}:rw') {
					stage(target) {
						try {
							sh('export')
							checkout(scm)
							sh('make distclean')
							sh('git fetch --tags')
							sh('ccache -z')
							sh('make ' + target)
							sh('ccache -s')
							sh('make sizes')
						}
						catch (exc) {
							throw{exc}
						}
						finally {
							sh('make distclean')
						}
					}
				}
			}
		}
	}
}